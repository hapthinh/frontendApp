{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/frontend-app/frontendApp/src/app/api/todolist/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { promises as fs } from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport { Key } from \"react\";\r\n\r\n// Path file json -> app/json/todolist.json\r\nexport const file = path.join(process.cwd() + \"/src/app/json/todolist.json\");\r\n\r\n//Type of Todo\r\nexport type Todo = {\r\n  id: Key | null | undefined;\r\n  todo: string;\r\n  status: boolean;\r\n};\r\n\r\n// Type of Todos\r\nexport type Todos = {\r\n  todos: Todo[];\r\n};\r\n\r\n// Get all todos or todo by keyword or tody by completed\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const keyword = searchParams.get(\"kw\") || \"\";\r\n  const status = searchParams.get(\"status\") || \"\";\r\n  const raw = await fs.readFile(file, \"utf-8\");\r\n  const data = JSON.parse(raw) as Todos;\r\n\r\n  let todos : any = data;\r\n\r\n  // Filter by keyword\r\n  if (keyword) {\r\n    todos.todos = todos.todos.filter((todo: Todo) => {\r\n        String(todo.todo).toLowerCase().includes(keyword.toLowerCase())\r\n    })\r\n  }\r\n\r\n  // Filter by status\r\n  if (status) {\r\n    todos.todos = todos.todos.filter((todo: Todo) => String(todo.status) === status);\r\n  }\r\n\r\n  return NextResponse.json({ todos });\r\n}\r\n\r\n// Post new Todo\r\nexport async function POST(request: Request) {\r\n  const raw = await fs.readFile(file, \"utf-8\");\r\n  const body = await request.json();\r\n  const data = JSON.parse(raw);\r\n  const newTodo = { ...body, completed: false };\r\n\r\n  data.todos.push(newTodo);\r\n\r\n  await fs.writeFile(file, JSON.stringify(data, null, 2), \"utf-8\");\r\n\r\n  return NextResponse.json(newTodo);\r\n}\r\n\r\n// Delete Todo by Id\r\nexport async function DELETE(request: Request) {\r\n  const raw = await fs.readFile(file, \"utf-8\");\r\n  const body = await request.json();\r\n  const data = JSON.parse(raw);\r\n  const id = body.id;\r\n\r\n  data.todos = data.todos.filter((todo: Todo) => todo.id !== id);\r\n\r\n  await fs.writeFile(file, JSON.stringify(data, null, 2), \"utf-8\");\r\n\r\n  return NextResponse.json({ success: true });\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAKO,MAAM,OAAO,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK;AAevC,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,UAAU,aAAa,GAAG,CAAC,SAAS;IAC1C,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;IAC7C,MAAM,MAAM,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,MAAM;IACpC,MAAM,OAAO,KAAK,KAAK,CAAC;IAExB,IAAI,QAAc;IAElB,oBAAoB;IACpB,IAAI,SAAS;QACX,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,CAAC;YAC9B,OAAO,KAAK,IAAI,EAAE,WAAW,GAAG,QAAQ,CAAC,QAAQ,WAAW;QAChE;IACF;IAEA,mBAAmB;IACnB,IAAI,QAAQ;QACV,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,CAAC,OAAe,OAAO,KAAK,MAAM,MAAM;IAC3E;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAM;AACnC;AAGO,eAAe,KAAK,OAAgB;IACzC,MAAM,MAAM,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,MAAM;IACpC,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,OAAO,KAAK,KAAK,CAAC;IACxB,MAAM,UAAU;QAAE,GAAG,IAAI;QAAE,WAAW;IAAM;IAE5C,KAAK,KAAK,CAAC,IAAI,CAAC;IAEhB,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI;IAExD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe,OAAO,OAAgB;IAC3C,MAAM,MAAM,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,MAAM;IACpC,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,OAAO,KAAK,KAAK,CAAC;IACxB,MAAM,KAAK,KAAK,EAAE;IAElB,KAAK,KAAK,GAAG,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,OAAe,KAAK,EAAE,KAAK;IAE3D,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI;IAExD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAK;AAC3C","debugId":null}}]
}