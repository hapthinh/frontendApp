{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/frontend-app/frontendApp/src/app/features/todos/TodoSlice.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport type Todo = {\r\n  id: number;\r\n  todo: string;\r\n  completed: boolean;\r\n};\r\n\r\nexport type Todos = {\r\n  todos: Todo[];\r\n  total: number;\r\n  skip: number;\r\n  limit: number;\r\n};\r\n\r\nexport interface TodoState {\r\n  items: Todo[];\r\n}\r\n\r\nconst initState: TodoState = {\r\n  items: [],\r\n};\r\n\r\nvar idTodo = 0;\r\nconst TodoSlice = createSlice({\r\n  name: \"todoSlice\",\r\n  initialState: initState,\r\n  reducers: {\r\n    addTodo: (state, action: PayloadAction<string>) => {\r\n      state.items.push({\r\n        id: ++idTodo,\r\n        todo: action.payload,\r\n        completed: false,\r\n      });\r\n    },\r\n    removeTodo: (state, action: PayloadAction<number>) => {\r\n      state.items = state.items.filter((todo) => todo.id !== action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, removeTodo } = TodoSlice.actions;\r\nexport const todoReducer = TodoSlice.reducer;\r\n"],"names":[],"mappings":";;;;;AAAA;;AAmBA,MAAM,YAAuB;IAC3B,OAAO,EAAE;AACX;AAEA,IAAI,SAAS;AACb,MAAM,YAAY,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IAC5B,MAAM;IACN,cAAc;IACd,UAAU;QACR,SAAS,CAAC,OAAO;YACf,MAAM,KAAK,CAAC,IAAI,CAAC;gBACf,IAAI,EAAE;gBACN,MAAM,OAAO,OAAO;gBACpB,WAAW;YACb;QACF;QACA,YAAY,CAAC,OAAO;YAClB,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK,OAAO,OAAO;QACvE;IACF;AACF;AAEO,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,UAAU,OAAO;AACjD,MAAM,cAAc,UAAU,OAAO","debugId":null}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/frontend-app/frontendApp/src/app/lib/store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { todoReducer } from \"app/features/todos/TodoSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    todos: todoReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;;;;;AAEO,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,OAAO,gJAAA,CAAA,cAAW;IACpB;AACF;AAKO,MAAM,iBAAiB;;IAAM,OAAA,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAD;AAAe;GAAhD;;QAAuB,4JAAA,CAAA,cAAW;;;AACxC,MAAM,iBAAkD,4JAAA,CAAA,cAAW","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Toby/frontend-app/frontendApp/src/app/provider/provider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { ReactNode } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { store } from \"app/lib/store\";\r\n\r\nexport default function Providers({ children }: { children: ReactNode }) {\r\n  return <Provider store={store}>{children}</Provider>;\r\n}\r\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOe,SAAS,UAAU,EAAE,QAAQ,EAA2B;IACrE,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,6HAAA,CAAA,QAAK;kBAAG;;;;;;AAClC;KAFwB","debugId":null}}]
}